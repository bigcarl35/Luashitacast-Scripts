Planned for 2.0

- Remove TANK sets. Instead, use //TANK and //NOT_TANK on
  the affected slots. As long as the definitions do not
  overlap the appropriate gear will be equipped. This
  effectively will look like there's two definitions in
  one gear set.

  Example
    'Head//TANK' = {}
    'Head//NO_TANK = {}

- Flesh out inline conditionals to ensure (where appropriate)
  theres a negative version of a current conditional.

  Example
    //ARC_CIRCLE should have a complimentary //NOT_ARC_CIRCLE
    inline conditional (or //EXPIRED_ARC_CIRCLE)

- Add inline conditionals support to slot definitions and
  subset definitions. If the conditionals are not true, the
  slot/subset will not be loaded.

  Example

    'Hands//DAYTIME' = {}

    The hands slot will be loaded only during daytime which
    6:00 to 18:00.

- Break up gcinclude.lua. Instead, have a bunch of .lua files
  based on groupings of functionality

- Modify /GC to validate codes, ensure referencing is to a
  valid subset and to valid slots from the designated sets.

  Example

        Head  = { 'Smn. Horn +1//SMNPETMW', 'Shep. Bonnet//PETF' },

        Validation will check that //SMNPETMW and //PETF are valid
        codes (which they are) and that they are applied to gear
        (as opposed to a subset which would be an incorrect use
        for these two codes.)

        ['Head'] = 'Accuracy::Head',

        Validation here will check that there's an Accuracy set and
        that "Head" is valid slot that has been defined in Accuracy.

        Subset//SLOTS:Hands,Feet = {

        Validation ensures that "Hands and Feet" are valid slots. No
        check is done to ensure that the targetted subsets actually
        have Hands or Feet defined. The lack of definition is not
        erroneous, just unfortunate.

- Add file option to the /GC command. /GC > filename

- Please note: in all options that can write a file, if the filename
  is explicitly designated, a file named that will be created in the
  /reports subdirectory. If no filename is designated, one will be
  created based on player's character name, job, and the date.

  Example
    /gc > smngc   this will create smngc.txt in the /reports directory
    /gc > this will create action_name_job_date.txt in the /reports directory

    If a file by that name already exists, it will be opened in append mode.

- If ../reports does not exist, create that directory

- Also note, any action with a pop-up window stores it's position in
  the ../Documentation/karma.txt file. The name is a reminant from the
  last major release.

- Timed hold over on targetted equipment. The player can designate in
  specific gear set definitions that certain gear should be tracked.
  What this means is that when that piece of gear in that set is to
  be swapped out, the program will continue to equip it for a
  specified amount of time before releasing the "hold" mechanism
  and the normal swapping resuming. The intent here is to overcome
  a condition that causes rapid swapping between the tracked piece
  and the next one in the list, an effect we've named flickering.

    Example

        ['TP'] = {
            Body  = { 'Ducal Aketon//TOWN-AK',
                      'Yinyang Robe'//MPP.LT.94//TRACK:10', 'Summoner\'s Dblt.',

        If the currently piece of gear from the TP set equipped is a Yinyang Robe
        and the "MPP.LT.94" conditional is no longer true, the piece will remain
        equipped from the TP set for 10 more seconds before tracking is stopped
        and equipment swapping continues as normal.

  //TRACK cannot be applied to a slot name. It's too much of a
  headache and I can't think of a time you would want to track
  every item in the attached priority list. (If you can, just
  append //TRACK on all gear pieces for that slot.)

  /GC will generate all the entries for the timed delay table, only
  the enabled field will be set to false. That way when the field is
  being processed, all that is needed is to enable the line and
  update the expiry time field. When the entry expires, the enabled
  field will be set to false and the expiry field will be set to null.

- Change /SMG to be position independent. This means that parameters
    can be ordered any way you want.

    Syntax:
        /smg gs="x" slots="hands,feet" > filename

        "gs" stands for gear set. You only need quotes if the set name
        is more than one word.

        "slots" stands for the slot names (comma delimited). You can
        specify the slots by either the name or the equipment grid
        position.

        Example: /smg slots="hands,feet" or /smg slots="10,16"

- /SMG optionally outputted to a file.

    Example

        /smg gs=tp > tp_gear.txt

        This would generated the /SMG listing for the TP gear set
        and output it to the tp-gear.txt file.

- New command for SMN planned: /911 for emergency pet. Evoking this command
  will summon one of the following, in order: the elemental spirit that
  matches the weather, the elemental spirit that matches the element of
  the day, or a default elemental spirit. Obviously the player must know
  the elemntal spirit to be summoned and the summons not be on cool down
  or else the next one in the chain will be summoned. If no elemental
  spirits in the chain are known or all on cool down, an error message
  will be displayed.

- Support for individual weaponskill gear sets. All weaponskills sets are
  based upon the primary stats that are used to increase damage, but this
  new feature will let the player define an explicit weaponskill gearset
  which overrides the use of the generic stats gearset.

  The new weaponskill set must be named WS_skill_name (or WS_skillname if
  the weapnskill is only one word.) The weaponskill name will be gotten
  from the player's action.

  Example:

    On a DRK, guillotine's damage is increased by increasing strength and
    mind (WS_STRMND), but by defining a set called: WS_GUILLOTINE, that
    set would be used instead and WS_STRMND.

- Add subset specific inline conditionals: //SLOTS: and //NOT_SLOTS:
  //SLOTS: lets the player limit which slots from the subset will be
  equipped and //NOT_SLOTS: lets players explicitly exclude certain
  slots from being equipped. Slot designation can either be the slot's
  name or equipment grid position. Example: //SLOTS:hands,feet or
  //SLOTS:10,16 refer to the same slots.

- Change MPP and HPP calculations to using information from the party
  rather than from the player. (For reasons which I do not understand,
  player.MaxHP and player.MaxMP returns the highest value because of
  gear the player has experienced in a zone, not the current highest
  value.) The following code using party referencing seems to be
  accurate. There's also a GetMemberHPPercent function.

    local party = AshitaCore:GetMemoryManager():GetParty();
    local SelfMPPercent = math.clamp(party:GetMemberMPPercent(0), 0, 100);
    if SelfMPPercent < 100 then

- New command, /DG for display gear. Displays the currently equipped
  gear to the screen or to a file.

  /DG > filename

  Condsider an optional gear set definition. This would evaluate the
  set with the current conditions as opposed to what is currently
  equipped. /DG gs=xx > filename

- New feature, custom conditionals. At some point some function will be
  needed but not available. As long as the function provides a simple
  yes/no answer, you can use a custom conditional. /C1 with enable/
  disable custom #1. By placing a //C1 on a piece of gear in a gear set,
  C1 will be checked for it being on or off. (The state will be reflected
  in the displaybar.) Initially three custom conditionals will be supported.

    Example:

        Body = 'Yinyang Robe//C1',

        if C1 is on, the conditional is true and the Yinyang Robe will be
        equipped. If C1 is off, the conditional will be false and the robe
        will not be equipped. What does C1 represent? That's up to the
        player. Maybe that the pet has less than 75% health. We currently
        do not have a conditional dealing with pet health. This would be
        a way for the player to flag the gear change.

There's some general cleanup and rewrite anticipated too

- Remove the code that adds reference entries to the dynamic gear listing
  when a set is to be equipped. This feature is no longer necessary as
  /gc creates all the entries in one pass and is required to be run.

- Turn gswap off when /gc has yet to be run. It cannot be enabled until
  /gc is run. At that point it will assume the default setting for the
  job. A warning message will be displayed if gswap is attempted to be
  turned on before /gc run.

- Rewrite some of the code so that additional functionality isn't hanging
  onto the existing code, but instead well integrated. Rewriting though
  should be done juditiously since it's mostly just a repeat of what is
  already working.

- Rewrite HandleAbility so that all of the abilities do not have to be
  explicitly written out.

- Move HandleItem to the gcinclude side of the files. Change the job
  version to just a stub function.

- Move generic PetAction to gcinclude and pass in specific message,
  accordingly.

- Consider moving all the toggle/"one of" functionality to its own lua
  file and removing it from gcdisplay.lua.

- Create variables for toolbar selection, and various feedback mechanisms
  so that the player can easily change them without surveying the code to
  find them.

- Consider breaking out routines from the job files into their own lua
  files.

Depending on time and my sanity, the following might also be included:

- There's a strong desire to split the gear sets out of the files that
  have code in them. Currently I can find no way to do that programmatically,
  but a valid approach might be to split the top half of the program that
  have the gear sets from the bottom half that have the code and create
  a .bat file that will recombine the two halves into the single file
  that's needed for luashitacast to run. Further exploration is needed
  with the understanding that I run FFXI from linux while most others
  that use my code do so from Windows.

- Elemental obis boost elemental damage by equipping the correct obi that
  matches either the appropriate day's element or the appropriate
  weather. It applies to spells and songs that are elemental in nature.
  Note: the element of the spell/song does not have to match the element
  of the obi. Further, an elemental obi can also be used to boost damage in
  an elemental weaponskill if closing a skill chain.

  Currently elemental obi's are checked for when you do any elemental spell.
  Instead, now, the player should be able to designate to check for an elemental
  obi whenever they're doing any elemental spell/song in the appropriate
  midcast. By using the keyword: #OBI#, luashitacast will determine if an
  elemental obi is advantageous and determine if the player owns the
  appropriate one and equip it. Note that elemental obi's will be looked
  for only where elemental spells/songs can be cast. The use of the keyword
  #OBI# will not be recognized anywhere else and /GC will display a warning
  if found in an unexpected gear set.

  Example
    ['ElementalNuke'] = {
      'Waist' = '#OBI#,
    }

  The second use, closing an elemental skillchain will still not be
  supported. You can temporarily encode a specific elemental obi into
  a weaponskill definition if you know it matches the skillchain's
  element and you are the one that will be closing the weapon chain.

- Elemental gorgets are checked for when doing a weaponskill. The element
  of the gorget must match one of the elements associated with the weaponskill.
  It follows the same formula for elemental obis regarding the day's element
  and the weather. Like the elemental #OBI#, the player will add the keyword:
  #GORGET# into the appropriate weaponskill set. (If found elsewhere it will
  be ignored and /GC will display an warning.)

  Example
    ['WS_DEXAGI'] = {
      Neck = {'#GORGET#', 'Warwolf Belt' }
    }

- Add pop-up for displaying player to target (ptt) information. Make it
  color coded, green if close enough, red if too far. Limited to pet
  classes, mostly used by SMN. Player Should be able to drag box to
  where they want it and the position and whether it's displayed will be
  remembered.

- Add pop-up grid for displaying locks that can be dragged on top of HXUI's
  equipment grid. Position and whether it's displayed will be remembered.

- Add pop-up for displaying day cycle noting current day. Player should be
  able to drag box to where they want it and the position and whether it's
  displayed will be remembered.

- Fix bug when /smg gs=currentgear is run. For some reason ears and rings
  are empty although these slots are populated on equipped gear.

- Consider changing all luashitacast calls to ashitacore calls. I find
  myself wanting to remove some dependencies from the luashitacast code.

- Make a section in displaybar for the "show" switches: sPF, sBP, and sS.
  Adapt displaybar table to support different sections.

- Add a toggle to equip an HP down set (used by BLM for sorcerous ring
  check or other similar ring checks.) Alternatively, have a named
  gearset do the HP down such that an explicit invocation of /gearset
  does the lowering. (Could be invoked via macro.) That way, no switch
  is needed.

- When a gearset is equipped via /gs or /gearset, display the name in the
  display bar. When locks are cleared, remove that name.

The following are really questionable and further thought is needed to consider them

- Add support for changing the macro bar when any of the
  crafts or gathering sets are equipped. Set the macro
  bar back to what it was when the locks are cleared.
