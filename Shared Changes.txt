- In gcdisplay.lua,
	- Add to the JobBar definition, below the 'AJug' line:
		
		['DB'] = {'BST','M'},				-- BST field, only valid if BST is main job
		
- In gcinclude.lua,
	- In the definitions area, modify "gcinclude.AliasList" to include 'db','slot', as in:
		
		gcinclude.AliasList = T{'gswap','gcmessages','wsdistance','dt','kite','acc','eva','gearset','gs','th','help','wswap','petfood','maxspell','maxsong','region','ajug','db','sbp','showit','equipit','tank','lock','unlock','slot','horn','string','validate','t1'};
	
	- In gcinclude.SetVariables, below "gcdisplay.CreateToggle('AJug',true);", add :
		
		gcdisplay.CreateCycle('DB', {[1] = 'None', [2] = 'BPP', [3] = 'WSS', [4] = 'All'});
		
	- In gcinclude.HandleCommands, below:
	
		elseif (args[1] == 'th') then			-- Turns on/off whether TH gear should be equipped
			gcdisplay.AdvanceToggle('TH');
			toggle = 'Treasure Hunter';
			status = gcdisplay.GetToggle('TH');
			
		- Add:
		
			elseif (args[1] == 'db') then
				if player.MainJob == 'BST' then
					if args[2] ~= nil then
						gcdisplay.SetCycle('DB',string.upper(args[2]));
					else
						gcdisplay.AdvanceCycle('DB');
					end
				else
					print(chat.header('HandleCommands'):append(chat.message('Your job does not support that command. Ignoring.')));
				end
				toggle = 'Debuf';
				status = gcdisplay.GetCycle('DB');
			elseif (args[1] == 'slot') then					-- Locks specified slot and equips piece
				if #args == 3 then
					local sSlot = WhichSlot(args[2]);
					if sSlot ~= nil then
						gcinclude.LockUnlock('lock',sSlot);
						gFunc.ForceEquip(sSlot,args[3]);
					else
						print(chat.message('Invalid slot specified in /slot command. Ignoring'));
					end
				end
				
		- Also, after SBP code block, add:
		
			elseif (args[1] == 'ajug') then			-- Turns on/off whether Automatic Jug assignment enabled
				if player.MainJob == 'BST' then
					gcdisplay.AdvanceToggle('AJug');
					toggle = 'Show Blood Pact';
					status = gcdisplay.GetToggle('AJug');
				else
					print(chat.header('HandleCommands'):append(chat.message('Error: /AJug is only available to beastmasters. Ignoring command')));
				end
				
		- Also, append a ";" to the sbp print error line
		
	- In InlineCodes definition, add the following after '//SPIRIT:EP':
		
		,'//SMNPET','//DB:BPP','//DB:WSS','//DB:ALL','//ACCESSIBLE','//ACCURACY'
		
	- In gcinclude.CheckInline, add the following after the 'SPIRIT:EP' definition block:
	
		elseif suCode == 'SMNPET' then				-- Is player's pet a summoned avatar
			bGood = (pet ~= nil and string.find(gcinclude.SummonSkill,string.lower(pet.Name)));
		elseif string.sub(suCode,1,3) == 'DB:' then
			bGood = (player.MainJob == 'BST' and string.upper(string.sub(suCode,4,-1)) == string.upper(gcdisplay.GetCycle('DB')));
		elseif suCode == 'ACCESSIBLE' then
			if CheckGearIntegrity(sGear) == true then
				bGood = Integrity['Equipable'];
			else
				bGood = false;
			end	
		elseif suCode == 'ACCURACY' then
			bGood = (gcdisplay.GetToggle('Acc') == true);
		
	- Add WhichSlot function below gcinclude.GetTableByName
	
	--[[
		WhichSlot takes the passed slot #/name/code and converts it to a correctly
		formatted equipment slot name. If unable to determine, nil is returned.
	--]]

	function WhichSlot(sSlot)
		if sSlot == nil then
			return nil;
		end
	
		sSlot = string.lower(sSlot);
	
		-- First look for special cases, then determine if a slot name or
		-- number is specified
		if sSlot == 'rings' then
			return 'Ring1';
		elseif sSlot == 'ears' then
			return 'Ear1';
		else
			-- Locks are a convenient list to use to identify the slot name/number
			for j,k in ipairs(gcinclude.Locks) do
				if k[1] == sSlot or j == sSlot then
					return string.upper(k[1],1,1) .. string.sub(k[1],2,-1);
				end
			end
			return nil;
		end
	end
===================
- Change function gcinclude.HandleMidcast,
	-Change:
		function gcinclude.HandleMidcast(() 
	-To:
		function gcinclude.HandleMidcast(bTank)

	-After:
		local cKey;
		
	-Add:
		if bTank == nil then	-- Need to check because of transition state of change
			bTank = false;
		end
		
	-Change:
		if sSet == 'MND' then
			gcinclude.MoveToCurrent(gProfile.Sets.MND,gProfile.Sets.CurrentGear);
		elseif sSet == 'INT' then
			gcinclude.MoveToCurrent(gProfile.Sets.INT,gProfile.Sets.CurrentGear);
		end	
		
	-To:
		if sSet == 'MND' then
			if bTank == true then
				gcinclude.MoveToCurrent(gProfile.Sets.Tank_MND,gProfile.Sets.CurrentGear);
			else
				gcinclude.MoveToCurrent(gProfile.Sets.MND,gProfile.Sets.CurrentGear);
			end
		elseif sSet == 'INT' then
			if bTank == true then
				gcinclude.MoveToCurrent(gProfile.Sets.Tank_INT,gProfile.Sets.CurrentGear);
			else
				gcinclude.MoveToCurrent(gProfile.Sets.INT,gProfile.Sets.CurrentGear);
			end
		end
		
	-Change:
		-- Mind has a large affect on Stoneskin, so equip it here
		gcinclude.MoveToCurrent(gProfile.Sets.MND,gProfile.Sets.CurrentGear);
	-To:
		-- Mind has a large affect on Stoneskin, so equip it here
		if bTank == true then
			gcinclude.MoveToCurrent(gProfile.Sets.TANK_MND,gProfile.Sets.CurrentGear);
		else
			gcinclude.MoveToCurrent(gProfile.Sets.MND,gProfile.Sets.CurrentGear);
		end
		
- In gcinclude.HandleWeaponskill,
	-Change:
		function gcinclude.HandleWeaponskill()
	-To:
		function gcinclude.HandleWeaponskill(bTank)
	
	-After:
		local ws = gData.GetAction();
		
	-Add:
		if bTank == nil then	-- Need to check because of transition state of change
			bTank = false;
		end
		
	-Change:
		if gcdisplay.GetToggle('acc') == true then
			gcinclude.MoveToCurrent(gProfile.Sets.Accuracy,gProfile.Sets.CurrentGear);
		end	
	-To:
		if gcdisplay.GetToggle('acc') == true then
			if bTank == true then
				gcinclude.MoveToCurrent(gProfile.Sets.Tank_Accuracy,gProfile.Sets.CurrentGear);
			else
				gcinclude.MoveToCurrent(gProfile.Sets.Accuracy,gProfile.Sets.CurrentGear);
			end	
		end